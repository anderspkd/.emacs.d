#+TITLE: Emacs configuration

Inspired in large parts by [[https://github.com/ckruse/Emacs.d/blob/fcdd24e413772d7a809d6071b882c555ddee694e/emacs.org][ckruse emacs configuration]].

* General settings
** Initialization

   Start emacs server (if not already running).

   #+BEGIN_SRC emacs-lisp
     (load "server")
     (unless (server-running-p)
       (server-start))
   #+END_SRC

   Some custom-set variables
   #+begin_src emacs-lisp :tangle yes
     (custom-set-variables
      '(custom-safe-themes
        (quote
         ("a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e"
          "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa"
          "8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26"
          default))))
   #+end_src

   Add directory with some custom configuration stuff, as well as user
   secrets.
   #+begin_src emacs-lisp :tangle yes
     (add-to-list 'load-path "~/.emacs.d/lisp/")
     (add-to-list 'load-path "~/.emacs.d/super-secret-directory/")
   #+end_src

** Helper (non-interactive) functions

   Some non-interactive functions/macros, which helps with configuring
   emacs.

*** Helper for =add-to-list=.

    #+begin_src emacs-lisp :tangle yes
      (defmacro cf/add-to-list-lots (l &rest extra)
        `(when (boundp ',l)
           (mapc #'(lambda (x)
                     (add-to-list ',l x))
                 (list ,@extra))))
    #+end_src

    It should be possible to enable the above macro to accept per
    list-item settings for the call to =add-to-list=.

** Remove toolbar, menubar and so on

   Remove almost everything.
   #+BEGIN_SRC emacs-lisp
     (tooltip-mode -1)
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)

     (setq ring-bell-function 'ignore)

     (setq inhibit-splash-screen t)
   #+END_SRC

** Scratch stuff

   Set initial message
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message nil)
   #+END_SRC

   Allow us to re-create the scratch buffer
   #+BEGIN_SRC emacs-lisp
     (defun cf/recreate-scratch ()
       (interactive)
       (switch-to-buffer (get-buffer-create "*scratch*"))
       (lisp-interaction-mode))
   #+END_SRC

** No blinking cursor

   #+begin_src emacs-lisp :tangle yes
     (blink-cursor-mode 0)
   #+end_src

** Language

   Fix dead keys (e.g., tilde)
   #+BEGIN_SRC emacs-lisp
     (require 'iso-transl)
   #+END_SRC

** 'y' or 'n' instead of 'yes' or 'no'

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Tabs instead of spaces
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

** Do backups in a sane way
   #+BEGIN_SRC emacs-lisp
     (setq backup-by-copying t
           backup-directory-alist '(("." . "~/.emacs_backups"))
           delete-old-versions t
           kept-new-versions 6
           kept-old-versions 2
           version-control t)
   #+END_SRC

** Open urls in default browser (chromium)
   #+BEGIN_SRC emacs-lisp
     (setq browse-url-chromium-arguments '("-incognito")
           browse-url-generic-program "chromium"
           browse-url-browser-function 'browse-url-chromium)
   #+END_SRC

** Yasnippet

   #+BEGIN_SRC emacs-lisp
     (require 'yasnippet)
     (yas-global-mode 1)
   #+END_SRC

** Autocomplete

   #+begin_src emacs-lisp :tangle yes
     (require 'auto-complete)
     (require 'auto-complete-config)

     (ac-config-default)
   #+end_src

** smart-mode-line

   Unclutter the mode line. Also add some nifty abbreviations for
   common directories.
   #+begin_src emacs-lisp :tangle yes
     (require 'smart-mode-line)
     (sml/setup)

     (setq sml/no-confirm-load-theme t)
     (sml/apply-theme 'respectful)

     ;; Hide some minor modes
     (cf/add-to-list-lots sml/hidden-modes
                          " Helm"
                          " yas"
                          " AC"
                          " SP")

     (cf/add-to-list-lots sml/replacer-regexp-list
                          '("^~/Code/" ":CODE:")
                          '("^~/.config/" ":CONF:")
                          '("^~/.emacs.d/" ":EMACS:")
                          '("^~/Documents/" ":DOC:")
                          '("^~/Documents/org/" ":ORG:")
                          '("^~/Documents/uni/" ":UNI:"))
   #+end_src

** Themes and fonts

   Use DejaVu Sans Mono as the font face.
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 90)
   #+END_SRC

   Use the light version of solarized as the default theme. Emacs
   doesn't respect these settings in new frames (frames opened by
   =emacsclient=), should probably fix this.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/color-theme-solarized-20160626.743/")

     (set-frame-parameter nil 'background-mode 'light)
     (load-theme 'solarized)

     (defun cf/switch-theme-mode ()
       (interactive)
       (let ((curr-mode (frame-parameter nil 'background-mode)))
         (if (eq curr-mode 'light)
             (set-frame-parameter nil 'background-mode 'dark)
           (set-frame-parameter nil 'background-mode 'light)))
       (enable-theme 'solarized))
   #+END_SRC

** Status bar stuff
   Current time and date
   #+BEGIN_SRC emacs-lisp
     (setq display-time-24hr-format t)
     (setq display-time-day-and-date t)
     (setq display-time-default-load-average nil)
     (display-time)
   #+END_SRC

   Column and line numbers as well
   #+BEGIN_SRC emacs-lisp
     (line-number-mode t)
     (column-number-mode t)
   #+END_SRC

** Syntax highlighting

   #+BEGIN_SRC emacs-lisp
     (when (fboundp 'global-font-lock-mode)
       (global-font-lock-mode t)
       (setq font-lock-maximum-decoration t))
   #+END_SRC

** Parenthesis stuff

   #+BEGIN_SRC emacs-lisp
     (require 'smartparens-config)

     (smartparens-global-mode)
     (show-smartparens-global-mode t)
   #+END_SRC

** Highlight current line

   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode t)
   #+END_SRC

** Unique buffer names

   Reverse the unique part of buffer names when multiple buffers with
   the same name exists. E.g., if I visit files =foo/name= and
   =bar/name= then the buffer names of these will be displayed as
   =name\foo= and =name\bar=, respectively.

   Might be somewhat redundent when using =helm=.
   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)

     (setq uniquify-buffer-name-style 'reverse)
   #+END_SRC

** Number windows

   Lets us switch between windows with =M-<n>=
   #+BEGIN_SRC emacs-lisp
     (window-numbering-mode 1)
   #+END_SRC

** Scroll window in a sane way

   Only advance one line at a time, instead of half of the window or
   whatever's the default.
   #+BEGIN_SRC emacs-lisp
     (setq scroll-step 1)
   #+END_SRC

** Automatically delete trailing whitespace upon save

   Automatically delete trailing whitespace characters when saving a
   file with =C-x C-s=.
   #+BEGIN_SRC emacs-lisp
     (advice-add 'save-buffer :before
                 #'(lambda (&rest args)
                     (delete-trailing-whitespace)))
   #+END_SRC
   It might be worth considering whether or not this should happen in
   every mode.

** Ask if I really want to kill emacs

   #+begin_src emacs-lisp :tangle yes
     (setq confirm-kill-emacs 'y-or-n-p)
   #+end_src

* Helper functions
** Byte compiling

   Speeds up startup significantly.
   #+BEGIN_SRC emacs-lisp
     (defun cf/byte-recompile ()
         (interactive)
         (byte-recompile-directory "~/.emacs.d" 0))
   #+END_SRC

** Kill all buffers

   #+BEGIN_SRC emacs-lisp
     (defun cf/kill-all-buffers ()
       (interactive)
       (when (y-or-n-p "Kill all buffers?")
         (mapc 'kill-buffer (buffer-list))
         (delete-other-windows)))

     (global-set-key (kbd "C-x K") 'cf/kill-all-buffers)
   #+END_SRC

* Custom global keybinds

** Enable some existing keybinds

   #+begin_src emacs-lisp :tangle yes
     (put 'upcase-region 'disabled nil)
   #+end_src

** Some form of completion at point

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C--") 'dabbrev-expand)
   #+END_SRC

* Languages
** Latex

   #+BEGIN_SRC emacs-lisp
     (require 'tex)
     (setq TeX-auto-save t)
     (setq TeX-parse-self t)
     (setq-default TeX-master nil)
     (setq ispell-list-command "--list")
   #+END_SRC

   Enable math-mode, automatic line wrapping and spell checking in
   latex.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'LaTeX-mode-hook 'visual-line-mode)
     (add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
     (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
   #+END_SRC

** Markdown

   #+BEGIN_SRC emacs-lisp
     (add-hook 'markdown-mode-hook 'turn-on-flyspell)
   #+END_SRC
** C

   #+begin_src emacs-lisp :tangle yes
     (add-hook 'c-mode-hook #'(lambda () (c-set-style "linux")))
   #+end_src

** Common lisp

   Use SBCL
   #+BEGIN_SRC emacs-lisp
     (setq inferior-lisp-program "/usr/bin/sbcl")
   #+END_SRC

   Slime settings.
   #+BEGIN_SRC emacs-lisp
     (require 'slime)
     (require 'auto-complete)
     (ac-config-default)
     (slime-setup '(slime-fancy))
     (add-hook 'slime-mode-hook 'set-up-slime-ac)

     ;; Slime helper
     (load (expand-file-name "~/Code/cl/quicklisp/slime-helper.el"))
     (setq inferior-lisp-program "sbcl")
   #+END_SRC

** Python

   Use elpy. Not currently enabled.
   #+begin_src emacs-lisp :tangle no
     (elpy-enable)
   #+end_src

** Web-mode

   Everything pertaining to web related languages.

   Use =web-mode=
   #+BEGIN_SRC emacs-lisp
     (require 'web-mode)

     (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.djhtml?\\'" . web-mode))

     (setq web-mode-engines-alist
           '(("jinja" . "\\.djhtml?\\'")))

   #+END_SRC

   Disable =smartparens-mode= as it interfers with =web-mode='s way of
   dealing with parenthesis.
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'web-mode-hook #'(lambda ()
                                  (smartparens-mode 0)))
   #+end_src

** Java

   Use [[https://github.com/emacs-eclim/emacs-eclim][eclim]].
   #+begin_src emacs-lisp :tangle yes
     (require 'eclim)
     (global-eclim-mode)

     (require 'eclimd)
   #+end_src

   Some other helpful settings from the project page.
   #+begin_src emacs-lisp :tangle yes
     (setq help-at-pt-display-when-idle t)
     (setq help-at-pt-timer-delay 0.1)
     (help-at-pt-set-timer)

     ;; Auto complete
     (require 'ac-emacs-eclim)
     (ac-emacs-eclim-config)
   #+end_src

** PHP

   For the sole purpose of syntax highlighting when browsing =.php=
   files.
   #+BEGIN_SRC emacs-lisp
     (require 'php-mode)
     (add-to-list 'auto-mode-alist '("\\.php" . php-mode))
   #+END_SRC

* Modes

  Settings for modes that does not involve programming (e.g., =dired=)

** Helm

   Load helm, and set some general settings.
   #+begin_src emacs-lisp :tangle yes
     (require 'helm)
     (require 'helm-config)

     (helm-mode 1)

     (setq helm-split-window-in-side-p t

           ;;; Fuzzy match for various modes
           helm-M-x-fuzzy-match t
           helm-buffers-fuzzy-matching t
           helm-recentf-fuzzy-match t)

     (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
     (define-key helm-map (kbd "C-z") 'helm-select-action)
   #+end_src

   Helmify some common commands.
   #+begin_src emacs-lisp :tangle yes
     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)
     (global-set-key (kbd "C-x b") 'helm-mini)
     (global-set-key (kbd "C-x C-f") 'helm-find-files)
   #+end_src

** Elfeed

   Load =elfeed= and ensure that =curl= is used (eventhough it's the
   default).
   #+begin_src emacs-lisp :tangle yes
     (require 'elfeed)

     (setq elfeed-curl-program-name "curl"
           elfeed-use-curl t)

     (global-set-key (kbd "C-x w") 'elfeed)

     (require 'user-feeds)
   #+end_src

   I find it more intuitive that =n= and =p= scroll the currently
   showing feed, rather than jump to the next. I also find it more
   intuitive for the "previous" key (bound to =C-p=) to actually show
   the previous feed with respect to time, rather than order. Same
   with =C-n= and =elfeed-show-next=.
   #+begin_src emacs-lisp :tangle yes
     (define-key elfeed-show-mode-map "n" #'scroll-up-line)
     (define-key elfeed-show-mode-map (kbd "C-p") #'elfeed-show-next)
     (define-key elfeed-show-mode-map "p" #'scroll-down-line)
     (define-key elfeed-show-mode-map (kbd "C-n") #'elfeed-show-prev)
   #+end_src

   Some functionallity and keybinds which allows me to easially open
   video links in =mpv=, or send them to be displayed on my TV.
   #+begin_src emacs-lisp :tangle yes
     (require 'nicwh)

     (defmacro cf/mpv-proc (&rest args)
       `(start-process "mpv-emacs" nil "mpv" ,@args))

     (defun cf/open-in-something--search (&optional tv)
       "If [something] is supplied, open elfeed-entry-link on
     TV. Otherwise just open in mpv locally."
       (lexical-let ((tv tv))
         (lambda ()
           (interactive)
           (let* ((entry (elfeed-search-selected :single))
                  (url (elfeed-entry-link entry)))
             (elfeed-search-untag-all 'unread) ;; mark entry as read
             (if tv
                 (nicwh--play url t)
               (cf/mpv-proc url))))))

     (defun cf/open-in-something--show (&optional tv)
       "If [something] is supplied, open thing at point on
     TV. Otherwise just open in mpv locally."
       (lexical-let ((tv tv))
         (lambda ()
           (interactive)
           (let ((url (thing-at-point 'url)))
             (if remote
                 (nicwh--play url t)
               (cf/mpv-proc url))))))

     (define-key elfeed-show-mode-map "x" (cf/open-in-something--show))
     (define-key elfeed-show-mode-map "X" (cf/open-in-something--show t))
     (define-key elfeed-search-mode-map "x" (cf/open-in-something--search))
     (define-key elfeed-search-mode-map "X" (cf/open-in-something--search t))
   #+end_src

** Dired

   Lets us move up one level with backspace.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'dired-mode-hook
               #'(lambda ()
                   (local-set-key (kbd "<backspace>") 'dired-up-directory)))
   #+END_SRC

** Tramp

   #+BEGIN_SRC emacs-lisp
     (setq tramp-default-method "ssh")
   #+END_SRC

** Org

   #+BEGIN_SRC emacs-lisp
     (require 'org)

     (global-set-key (kbd "C-c l") 'org-agenda-link)
     (global-set-key (kbd "C-c a") 'org-agenda)
   #+END_SRC

   Specify where agenda files live. Also add some custom todo
   keywords.
   #+BEGIN_SRC emacs-lisp
     (setq org-log-done t)
     (setq org-agenda-files (directory-files "~/Documents/org" t "^\\([^.#]\\).+\\.org$"))
     (setq org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)")
                               (sequence "WAITING(w)" "|")
                               (sequence "|" "CANCELED(c)")))
     (setq org-todo-keyword-faces '(("WAITING" . "yellow")
                                    ("CANCELED" . (:foreground "grey" :weight "bold"))))
   #+END_SRC

   Rebuild agenda file list when reloading the agenda. In other words,
   automatically add newly created files in =~/Documents/org= to the
   agenda list
   #+BEGIN_SRC emacs-lisp
     (advice-add 'org-agenda-redo :before
                 #'(lambda (&rest args)
                     (setq org-agenda-files (directory-files "~/Documents/org"
                                                             t
                                                             "^\\([^.#]\\).+\\.org$"))))
   #+END_SRC

** Magit

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC

   Filler :D
